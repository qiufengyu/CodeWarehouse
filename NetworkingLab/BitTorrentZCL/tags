!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BE_DICT	src/bencode.h	/^	BE_DICT,$/;"	e	enum:__anon1
BE_INT	src/bencode.h	/^	BE_INT,$/;"	e	enum:__anon1
BE_LIST	src/bencode.h	/^	BE_LIST,$/;"	e	enum:__anon1
BE_STR	src/bencode.h	/^	BE_STR,$/;"	e	enum:__anon1
BTDATA_H	src/btdata.h	6;"	d
BT_COMPLETED	src/btdata.h	22;"	d
BT_STARTED	src/btdata.h	20;"	d
BT_STOPPED	src/btdata.h	21;"	d
CC	Makefile	/^CC=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS= -Wall -pedantic -std=c99 -g$/;"	m
Computed	src/sha1.h	/^    int Computed;               \/* Is the digest computed?          *\/$/;"	m	struct:SHA1Context
Corrupted	src/sha1.h	/^    int Corrupted;              \/* Is the message digest corruped?  *\/$/;"	m	struct:SHA1Context
DEBUG	src/pwp.c	15;"	d	file:
GITFLAGS	Makefile	/^GITFLAGS = -q  --no-verify --allow-empty$/;"	m
LIBS	Makefile	/^LIBS= -lpthread$/;"	m
Length_High	src/sha1.h	/^    unsigned Length_High;       \/* Message length in bits           *\/$/;"	m	struct:SHA1Context
Length_Low	src/sha1.h	/^    unsigned Length_Low;        \/* Message length in bits           *\/$/;"	m	struct:SHA1Context
ListHead	src/list.h	/^struct ListHead {$/;"	s
ListHead	src/list.h	/^typedef struct ListHead ListHead;$/;"	t	typeref:struct:ListHead
MAXLINE	src/util.h	19;"	d
MAX_PEER	src/pwp.h	8;"	d
MAX_REQUEST	src/pwp.h	7;"	d
Message_Block	src/sha1.h	/^    unsigned char Message_Block[64]; \/* 512-bit message blocks      *\/$/;"	m	struct:SHA1Context
Message_Block_Index	src/sha1.h	/^    int Message_Block_Index;    \/* Index into message block array   *\/$/;"	m	struct:SHA1Context
Message_Digest	src/sha1.h	/^    unsigned Message_Digest[5]; \/* Message Digest (output)          *\/$/;"	m	struct:SHA1Context
OBJS	Makefile	/^OBJS=src\/util.o \\$/;"	m
PEER_PORT	src/pwp.h	5;"	d
SHA1CircularShift	src/sha1.c	46;"	d	file:
SHA1Context	src/sha1.h	/^typedef struct SHA1Context$/;"	s
SHA1Context	src/sha1.h	/^} SHA1Context;$/;"	t	typeref:struct:SHA1Context
SHA1Input	src/sha1.c	/^void SHA1Input(     SHA1Context         *context,$/;"	f
SHA1PadMessage	src/sha1.c	/^void SHA1PadMessage(SHA1Context *context)$/;"	f
SHA1ProcessMessageBlock	src/sha1.c	/^void SHA1ProcessMessageBlock(SHA1Context *context)$/;"	f
SHA1Reset	src/sha1.c	/^void SHA1Reset(SHA1Context *context)$/;"	f
SHA1Result	src/sha1.c	/^int SHA1Result(SHA1Context *context)$/;"	f
SOURCES	Makefile	/^SOURCES=src\/util.c \\$/;"	m
SUB_PIECE_SIZE	src/pwp.h	6;"	d
TARGET	Makefile	/^TARGET=simpletorrent$/;"	m
TESTA	src/shatest.c	28;"	d	file:
TESTB	src/shatest.c	31;"	d	file:
TESTB_1	src/shatest.c	29;"	d	file:
TESTB_2	src/shatest.c	30;"	d	file:
TESTC	src/shatest.c	32;"	d	file:
UTIL_H	src/util.h	17;"	d
_BENCODE_H	src/bencode.h	14;"	d
_FILE_H_	src/file.h	2;"	d
_INFO_H_	src/info.h	3;"	d
_LIST_H_	src/list.h	2;"	d
_PWP_H_	src/pwp.h	2;"	d
_SHA1_H_	src/sha1.h	25;"	d
_announce_url_t	src/btdata.h	/^typedef struct _announce_url_t {$/;"	s
_be_decode	src/bencode.c	/^static be_node *_be_decode(const char **data, long long *data_len)$/;"	f	file:
_be_decode_int	src/bencode.c	/^static long long _be_decode_int(const char **data, long long *data_len)$/;"	f	file:
_be_decode_str	src/bencode.c	/^static char *_be_decode_str(const char **data, long long *data_len)$/;"	f	file:
_be_dump	src/bencode.c	/^static void _be_dump(be_node *node, ssize_t indent)$/;"	f	file:
_be_dump_indent	src/bencode.c	/^static void _be_dump_indent(ssize_t indent)$/;"	f	file:
_be_free_str	src/bencode.c	/^static inline void _be_free_str(char *str)$/;"	f	file:
_peer_t	src/btdata.h	/^typedef struct _peer_t {$/;"	s
_peerdata	src/btdata.h	/^typedef struct _peerdata {$/;"	s
_torrentmetadata	src/btdata.h	/^typedef struct _torrentmetadata {$/;"	s
_tracker_data	src/btdata.h	/^typedef struct _tracker_data {$/;"	s
_tracker_request	src/btdata.h	/^typedef struct _tracker_request {$/;"	s
_tracker_response	src/btdata.h	/^typedef struct _tracker_response {$/;"	s
announce	src/btdata.h	/^  char* announce; \/\/ tracker的URL$/;"	m	struct:_torrentmetadata
announce_url_t	src/btdata.h	/^} announce_url_t;$/;"	t	typeref:struct:_announce_url_t
be_alloc	src/bencode.c	/^static be_node *be_alloc(be_type type)$/;"	f	file:
be_decode	src/bencode.c	/^be_node *be_decode(const char *data)$/;"	f
be_decoden	src/bencode.c	/^be_node *be_decoden(const char *data, long long len)$/;"	f
be_dict	src/bencode.h	/^typedef struct be_dict {$/;"	s
be_dict	src/bencode.h	/^} be_dict;$/;"	t	typeref:struct:be_dict
be_dump	src/bencode.c	/^void be_dump(be_node *node)$/;"	f
be_free	src/bencode.c	/^void be_free(be_node *node)$/;"	f
be_node	src/bencode.h	/^typedef struct be_node {$/;"	s
be_node	src/bencode.h	/^} be_node;$/;"	t	typeref:struct:be_node
be_str_len	src/bencode.c	/^long long be_str_len(be_node *node)$/;"	f
be_type	src/bencode.h	/^} be_type;$/;"	t	typeref:enum:__anon1
bitfield	src/info.h	/^    char    *bitfield;$/;"	m	struct:globalInfo_t
bitfield	src/pwp.h	/^	char* bitfield;$/;"	m	struct:torrent_info
choked	src/btdata.h	/^  int choked;         \/\/ 作为下载者, 我们被远端peer阻塞$/;"	m	struct:_peer_t
choking	src/btdata.h	/^  int choking;        \/\/ 作为上传者, 阻塞远端peer$/;"	m	struct:_peer_t
client_shutdown	src/shutdown.c	/^void client_shutdown(int sig)$/;"	f
connect_to_host	src/util.c	/^int connect_to_host(char* ip, int port)$/;"	f
connfd	src/pwp.h	/^	int connfd;$/;"	m	struct:control_block
connfd	src/pwp.h	/^	int connfd;$/;"	m	struct:p2p_thread
control_block	src/pwp.h	/^typedef struct control_block{$/;"	s
d	src/bencode.h	/^		struct be_dict *d;$/;"	m	union:be_node::__anon2	typeref:struct:be_node::__anon2::be_dict
data	src/btdata.h	/^  char* data;     \/\/ B编码的字符串$/;"	m	struct:_tracker_response
done	src/info.h	/^    int     done;$/;"	m	struct:globalInfo_t
download_mutex	src/pwp.c	/^pthread_mutex_t download_mutex;$/;"	v
download_num	src/pwp.h	/^	int download_num;$/;"	m	struct:download_piece
download_piece	src/pwp.h	/^typedef struct download_piece{$/;"	s
download_piece	src/pwp.h	/^}download_piece;$/;"	t	typeref:struct:download_piece
download_piece_head	src/pwp.c	/^ListHead download_piece_head;$/;"	v
downloaded	src/btdata.h	/^  int downloaded;$/;"	m	struct:_tracker_request
downloaded	src/info.h	/^    int     downloaded;$/;"	m	struct:globalInfo_t
drop_conn	src/pwp.c	/^static inline void drop_conn(p2p_cb* nowp2p)$/;"	f	file:
file_len	src/util.c	/^int file_len(FILE* fp)$/;"	f
find_download_piece	src/pwp.c	/^download_piece* find_download_piece(int index){$/;"	f
first_req	src/pwp.c	/^int first_req=1;$/;"	v
first_req_mutex	src/pwp.c	/^pthread_mutex_t first_req_mutex;$/;"	v
g_done	src/btdata.h	/^int g_done; \/\/ 表明程序是否应该终止$/;"	v
g_downloaded	src/btdata.h	/^int g_downloaded;$/;"	v
g_filedata	src/btdata.h	/^char* g_filedata;      \/\/ 文件的实际数据$/;"	v
g_filelen	src/btdata.h	/^int g_filelen;$/;"	v
g_filename	src/btdata.h	/^char* g_filename;$/;"	v
g_infohash	src/btdata.h	/^int g_infohash[5]; \/\/ 要共享或要下载的文件的SHA1哈希值, 每个客户端同时只能处理一个文件$/;"	v
g_left	src/btdata.h	/^int g_left;$/;"	v
g_my_id	src/btdata.h	/^char g_my_id[20];$/;"	v
g_my_ip	src/btdata.h	/^char g_my_ip[128]; \/\/ 格式为XXX.XXX.XXX.XXX, null终止$/;"	v
g_num_pieces	src/btdata.h	/^int g_num_pieces;$/;"	v
g_peerport	src/btdata.h	/^int g_peerport; \/\/ peer监听的端口号$/;"	v
g_torrentmeta	src/btdata.h	/^torrentmetadata_t* g_torrentmeta;$/;"	v
g_tracker_ip	src/btdata.h	/^char g_tracker_ip[16]; \/\/ tracker的IP地址, 格式为XXX.XXX.XXX.XXX(null终止)$/;"	v
g_tracker_port	src/btdata.h	/^int g_tracker_port;$/;"	v
g_tracker_response	src/btdata.h	/^tracker_data *g_tracker_response;$/;"	v
g_uploaded	src/btdata.h	/^int g_uploaded;$/;"	v
get_bit_at_index	src/pwp.c	/^static inline int get_bit_at_index(char *bitfield, int index){$/;"	f	file:
get_block	src/file.c	/^char* get_block(int index){$/;"	f
get_peer_data	src/process_tracker_response.c	/^void get_peer_data(peerdata* peer, be_node* ben_res)$/;"	f
get_peers	src/process_tracker_response.c	/^void get_peers(tracker_data* td, be_node* peer_list)$/;"	f
get_tracker_data	src/process_tracker_response.c	/^tracker_data* get_tracker_data(char* data, int len)$/;"	f
globalArgs	src/pwp.c	/^struct globalArgs_t globalArgs;$/;"	v	typeref:struct:globalArgs_t
globalArgs_t	src/info.h	/^struct globalArgs_t{$/;"	s
globalInfo	src/pwp.c	/^struct globalInfo_t globalInfo;$/;"	v	typeref:struct:globalInfo_t
globalInfo_t	src/info.h	/^struct globalInfo_t{$/;"	s
have_interest	src/btdata.h	/^  int have_interest;  \/\/ 作为下载者, 对远端peer的分片有兴趣$/;"	m	struct:_peer_t
hostname	src/btdata.h	/^  char* hostname;$/;"	m	struct:_announce_url_t
i	src/bencode.h	/^		long long i;$/;"	m	union:be_node::__anon2
id	src/btdata.h	/^  char id[21]; \/\/ 20用于null终止符$/;"	m	struct:_peerdata
id	src/info.h	/^    char    id[20];$/;"	m	struct:globalInfo_t
index	src/pwp.h	/^	int index;$/;"	m	struct:download_piece
info_hash	src/btdata.h	/^  int info_hash[5]; \/\/ torrent的info_hash值(info键对应值的SHA1哈希值)$/;"	m	struct:_torrentmetadata
info_hash	src/btdata.h	/^  int info_hash[5];$/;"	m	struct:_tracker_request
info_hash	src/pwp.h	/^	char info_hash[20];$/;"	m	struct:torrent_info
init	src/simpletorrent.c	/^void init()$/;"	f
init_download_piece	src/pwp.c	/^download_piece *init_download_piece(int index){$/;"	f
interested	src/btdata.h	/^  int interested;     \/\/ 远端peer对我们的分片有兴趣$/;"	m	struct:_peer_t
interval	src/btdata.h	/^  int interval;$/;"	m	struct:_tracker_data
ip	src/btdata.h	/^  char ip[16]; \/\/ 自己的IP地址, 格式为XXX.XXX.XXX.XXX, 最后以'\\0'结尾$/;"	m	struct:_tracker_request
ip	src/btdata.h	/^  char* ip; \/\/ Null终止$/;"	m	struct:_peerdata
ip	src/info.h	/^    char    ip[16];$/;"	m	struct:globalInfo_t
ip	src/pwp.h	/^	char ip[20];$/;"	m	struct:p2p_thread
is_bitfield_empty	src/pwp.c	/^static inline int is_bitfield_empty(char *bitfield,int len){$/;"	f	file:
is_connect	src/pwp.h	/^	int is_connect;$/;"	m	struct:p2p_thread
is_interested_bitfield	src/pwp.c	/^int is_interested_bitfield(char *bitfield1, char *bitfield2, int len){$/;"	f
isseed	src/info.h	/^    int  isseed;$/;"	m	struct:globalArgs_t
key	src/bencode.h	/^	char *key;$/;"	m	struct:be_dict
l	src/bencode.h	/^		struct be_node **l;$/;"	m	union:be_node::__anon2	typeref:struct:be_node::__anon2::be_node
left	src/btdata.h	/^  int left;$/;"	m	struct:_tracker_request
left	src/info.h	/^    int     left;$/;"	m	struct:globalInfo_t
length	src/btdata.h	/^  int length;     \/\/ 文件长度, 以字节为单位$/;"	m	struct:_torrentmetadata
list	src/pwp.h	/^	ListHead list;$/;"	m	struct:control_block
list	src/pwp.h	/^	ListHead list;$/;"	m	struct:download_piece
list_add	src/list.h	/^list_add(ListHead *prev, ListHead *next, ListHead *data) {$/;"	f
list_add_after	src/list.h	/^list_add_after(ListHead *list, ListHead *data) {$/;"	f
list_add_before	src/list.h	/^list_add_before(ListHead *list, ListHead *data) {$/;"	f
list_del	src/list.h	/^list_del(ListHead *data) {$/;"	f
list_empty	src/list.h	/^list_empty(ListHead *list) {$/;"	f
list_entry	src/list.h	12;"	d
list_foreach	src/list.h	53;"	d
list_init	src/list.h	/^list_init(ListHead *list) {$/;"	f
listen_init	src/pwp.c	/^int listen_init(){$/;"	f
listenfd	src/pwp.c	/^int listenfd;$/;"	v
main	src/shatest.c	/^int main()$/;"	f
main	src/simpletorrent.c	/^int main(int argc, char **argv) $/;"	f
make_listen_port	src/util.c	/^int make_listen_port(int port)$/;"	f
make_tracker_request	src/make_tracker_request.c	/^char* make_tracker_request(int event, int* mlen)$/;"	f
my_get_peers	src/process_tracker_response.c	/^void my_get_peers(tracker_data* td,be_node* peer_list){$/;"	f
name	src/btdata.h	/^  char name[20]; $/;"	m	struct:_peer_t
name	src/btdata.h	/^  char* name;     \/\/ 文件名$/;"	m	struct:_torrentmetadata
new_init_p2p	src/pwp.c	/^p2p_cb* new_init_p2p(){$/;"	f
next	src/list.h	/^	struct ListHead *prev, *next;$/;"	m	struct:ListHead	typeref:struct:ListHead::
num_pieces	src/btdata.h	/^  int num_pieces; \/\/ 分片数量$/;"	m	struct:_torrentmetadata
numpeers	src/btdata.h	/^  int numpeers;$/;"	m	struct:_tracker_data
p2p_cb	src/pwp.h	/^} p2p_cb;$/;"	t	typeref:struct:control_block
p2p_cb_head	src/pwp.c	/^ListHead p2p_cb_head;$/;"	v
p2p_mutex	src/pwp.c	/^pthread_mutex_t p2p_mutex;$/;"	v
p2p_run_thread	src/pwp.c	/^void* p2p_run_thread(void* param){$/;"	f
p2p_thread	src/pwp.h	/^typedef struct p2p_thread{$/;"	s
p2p_thread	src/pwp.h	/^}p2p_thread;$/;"	t	typeref:struct:p2p_thread
parse_announce_url	src/parse_announce_url.c	/^announce_url_t* parse_announce_url(char* announce)$/;"	f
parsetorrentfile	src/parsetorrentfile.c	/^torrentmetadata_t* parsetorrentfile(char* filename)$/;"	f
peer_choke	src/pwp.h	/^	int peer_choke;$/;"	m	struct:control_block
peer_field	src/pwp.h	/^	char* peer_field;$/;"	m	struct:control_block
peer_id	src/btdata.h	/^  char peer_id[20];$/;"	m	struct:_tracker_request
peer_id	src/pwp.h	/^	char peer_id[20];$/;"	m	struct:control_block
peer_id	src/pwp.h	/^	char peer_id[20];$/;"	m	struct:torrent_info
peer_interest	src/pwp.h	/^	int peer_interest;$/;"	m	struct:control_block
peer_ip	src/pwp.h	/^	char peer_ip[20];$/;"	m	struct:control_block
peer_t	src/btdata.h	/^} peer_t;$/;"	t	typeref:struct:_peer_t
peerdata	src/btdata.h	/^} peerdata;$/;"	t	typeref:struct:_peerdata
peers	src/btdata.h	/^  peerdata* peers;$/;"	m	struct:_tracker_data
piece_count_mutex	src/pwp.c	/^pthread_mutex_t piece_count_mutex;$/;"	v
piece_counter	src/pwp.c	/^int* piece_counter;$/;"	v
piece_len	src/btdata.h	/^  int piece_len;  \/\/ 每一个分片的字节数$/;"	m	struct:_torrentmetadata
piece_num	src/pwp.h	/^	int piece_num;$/;"	m	struct:torrent_info
pieces	src/btdata.h	/^  char* pieces;   \/\/ 针对所有分片的20字节长的SHA1哈希值连接而成的字符串$/;"	m	struct:_torrentmetadata
port	src/btdata.h	/^  int port;$/;"	m	struct:_announce_url_t
port	src/btdata.h	/^  int port;$/;"	m	struct:_peerdata
port	src/btdata.h	/^  int port;$/;"	m	struct:_tracker_request
port	src/info.h	/^    int     port;$/;"	m	struct:globalInfo_t
port	src/info.h	/^    int  port;$/;"	m	struct:globalArgs_t
port	src/pwp.h	/^	int port;$/;"	m	struct:p2p_thread
preprocess_tracker_response	src/process_tracker_response.c	/^tracker_response* preprocess_tracker_response(int sockfd)$/;"	f
prev	src/list.h	/^	struct ListHead *prev, *next;$/;"	m	struct:ListHead	typeref:struct:ListHead::ListHead
readn	src/pwp.c	/^static int readn(int fd,void* content,size_t len)$/;"	f	file:
real_piece_len	src/pwp.c	/^static int real_piece_len(int index){$/;"	f	file:
recvline	src/util.c	/^int recvline(int fd, char **line)$/;"	f
recvlinef	src/util.c	/^int recvlinef(int fd, char *format, ...)$/;"	f
reverse_byte_orderi	src/util.c	/^int reverse_byte_orderi(int i)$/;"	f
s	src/bencode.h	/^		char *s;$/;"	m	union:be_node::__anon2
safe_free	src/pwp.c	/^static inline void safe_free(void* content){$/;"	f	file:
select_next_subpiece	src/pwp.c	/^int select_next_subpiece(int index,int* begin,int* length){$/;"	f
select_piece	src/pwp.c	/^int select_piece(){\/\/least first$/;"	f
self_choke	src/pwp.h	/^	int self_choke;$/;"	m	struct:control_block
self_interest	src/pwp.h	/^	int self_interest;$/;"	m	struct:control_block
send_choke	src/pwp.c	/^void send_choke(int connfd){$/;"	f
send_handshake	src/pwp.c	/^void send_handshake(int connfd){$/;"	f
send_have	src/pwp.c	/^void send_have(int connfd,int index){$/;"	f
send_interest	src/pwp.c	/^void send_interest(int connfd){$/;"	f
send_msg	src/pwp.c	/^void send_msg(int connfd){$/;"	f
send_not_interest	src/pwp.c	/^void send_not_interest(int connfd){$/;"	f
send_piece	src/pwp.c	/^void send_piece(int connfd,int index,int begin,int length){$/;"	f
send_request	src/pwp.c	/^void send_request(int connfd,int index,int begin,int length){$/;"	f
set_bit	src/pwp.c	/^static unsigned char set_bit[8] = {1,2,4,8,16,32,64,128};$/;"	v	file:
set_bit_at_index	src/pwp.c	/^static inline void set_bit_at_index(char *bitfield, int index, int bit){$/;"	f	file:
size	src/btdata.h	/^  int size;       \/\/ B编码字符串的字节数$/;"	m	struct:_tracker_response
sockfd	src/btdata.h	/^  int sockfd;$/;"	m	struct:_peer_t
sub_piece_num	src/pwp.h	/^	int sub_piece_num;$/;"	m	struct:download_piece
sub_piece_size	src/pwp.h	/^	int sub_piece_size;$/;"	m	struct:download_piece
sub_piece_state	src/pwp.h	/^	int* sub_piece_state;$/;"	m	struct:download_piece
torrent_info	src/pwp.h	/^typedef struct torrent_info{$/;"	s
torrent_info	src/pwp.h	/^}torrent_info;$/;"	t	typeref:struct:torrent_info
torrentmeta	src/info.h	/^    torrentmetadata_t   *torrentmeta;$/;"	m	struct:globalInfo_t
torrentmetadata_t	src/btdata.h	/^} torrentmetadata_t;$/;"	t	typeref:struct:_torrentmetadata
torrentpath	src/info.h	/^    char* torrentpath;$/;"	m	struct:globalArgs_t
tracker_data	src/btdata.h	/^} tracker_data;$/;"	t	typeref:struct:_tracker_data
tracker_ip	src/info.h	/^    char    tracker_ip[16];$/;"	m	struct:globalInfo_t
tracker_port	src/info.h	/^    int     tracker_port;$/;"	m	struct:globalInfo_t
tracker_request	src/btdata.h	/^} tracker_request;$/;"	t	typeref:struct:_tracker_request
tracker_response	src/btdata.h	/^} tracker_response;$/;"	t	typeref:struct:_tracker_response
tracker_response	src/info.h	/^    tracker_data        *tracker_response;$/;"	m	struct:globalInfo_t
type	src/bencode.h	/^	be_type type;$/;"	m	struct:be_node
uploaded	src/btdata.h	/^  int uploaded;$/;"	m	struct:_tracker_request
uploaded	src/info.h	/^    int     uploaded;$/;"	m	struct:globalInfo_t
val	src/bencode.h	/^	struct be_node *val;$/;"	m	struct:be_dict	typeref:struct:be_dict::be_node
val	src/bencode.h	/^	} val;$/;"	m	struct:be_node	typeref:union:be_node::__anon2
valid_ip	src/pwp.c	/^int valid_ip(char* ip){$/;"	f
verbose	src/info.h	/^    int  verbose;$/;"	m	struct:globalArgs_t
